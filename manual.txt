1. DESCRIPTION
    Here are presented all the functions that can be used during signal processing.
    Configuration file is a JSON file, which consists of flow scenarios for one signal. Each scenario has its own signal
    processing flow (preprocessing methods and feature extraction order).
    For each method there is a special name and attributes names that must be used and signed in configuration file.
    For each feature extraction there is a special name that must be used and signed in configuration file.

    This program gives complete freedom to the user so one can create many processing scenarios,
    and each of them can be given any name. What is more, in each scenario many processing methods can be used in any order,
    and one processing method can be used more than once in the single scenario.

    As the result, for each scenario user receives .csv files which contains:
    * extracted features from processed signal
        - only if at least one feature was specified in the scenario (file placed in ./results/features/ directory)
    *  signal after all modifications and running processing methods (file placed in ./results/signals/ directory).

    If you're feeling overwhelmed by the possibilities, take a look at the sample configuration file
    and I'm sure things will lighten up.

2. HOW TO RUN THE PROGRAM
    a. Download the program from GitHub TU_LINK
    b. Program was tested with Python 3.8.9 version. It is a recommended version.
    c. Install all the necessary dependencies contained in requirements.txt file
    d1. If one runs program from command line (for Windows users):
        I. Start Command Line and set path to the location where the main program is located (example C:\Documents\Projects\FIZEMO)
        II. Run main program with one attribute - the relative path to configuration file (py -3 main.py "./configuration/config.json")
    d2. If one runs program from developer tool like PyCharm:
        I. Set configuration parameter (command line parameters) as the path to configuration file
        (For PyCharm: Run->Edit Configurations and write in Parameters field the path to configuration file, for example "./configuration/config.json")


2. SCENARIO STRUCTURE
    Each scenario defined in configuration file has a special structure. It has to contain four elements:
    a. "signalFileName" - a string representing the name of the file with signal which is placed in ./signals catalog (example: "./signals/rawGSR.csv")
    b. "signalType" - a string representing a type of processed signal, it has to be chosen from the list of available types of signal (manual.txt, point 3.)
    c. "methods" - list of methods for signal processing or feature extraction
    d. "columns_to_read" - dictionary which contains information about columns to read from .csv file with signal data with specified "timestamp" column number and "values" column number

    There are two optional elements:
    e. "options" - dictionary which may contain two elements (both optional):
        * "save_processed_signal" - if set to "False" the program doesn't save the .csv file with processed signal; if this field is not specified, the default value is "True"
        * "draw_plot": "False" - if set to "False" the program doesn't plot the processed signal; if this field is not specified, the default value is "True"

3. AVAILABLE TYPES OF SIGNAL
    a. GSR (Galvanic Skin Response)
    b. ECG (Electrocardiography)

4. METHOD STRUCTURE
    To call function for processing signal in configuration file one has to fill 3 elements:
    "functionName": "...",
    "order": ...,
    "attributes": { #attributes }

    *   functionName - the name of the function one wants to use (string)
    **  order - natural number bigger or equal 1 which indicates the order of processing flow (int)
    *** attributes - attributes that are unique for each function; they specify function parameters;
        For some functions this element might be omitted (look at [Z NORMALIZATION] function).

5. AVAILABLE FUNCTIONS

    [BUTTERWORTH FILTER]
    Description:  Filter the signal with butterworth filter
    Function name: "butterworth_filter"
    Attributes:
       - "samplingRate" - signal sampling rate/frequency (integer - [Hz])
            !REMEMBER!: If you have used decimation function, you should type in sampling rate you achieved after decimation process!
       - "filterOrder" - the order of filter that will be created (integer - [Hz])
       - "type" - the type of the filter. Available types (string):
            'lowpass',
            'highpass'
            'bandpass'
            'bandstop'
       - "cut_of_freq" it is an array or a scalar of cut of frequencies.
            Scalar for 'lowpass' and 'highpass' filter (float - [Hz]). Example: 5.0
            Array of two values for 'bandpass' and 'bandstop' filter ([float, float] - [Hz]). Example: [5.0, 15.0]

    [DIFFERENTIATE]
    Description: Differentiate the signal
    Function name: "differentiate"
    Attributes: None

    [SQUARE]
    Description: Squares every value of the signal
    Function name: "square"
    Attributes: None

    [MOVING WINDOW INTEGRATION]
    Description:  Integrate the signal with moving frame of the given length
    Function name: "moving_window_integration"
    Attributes:
        "lengthOfWindow": length of the moving window (integer - number of samples)

    [DECIMATION]
    Description:  process of bandwidth reduction (filtering) and sample-rate reduction
    Function name: "decimate"
    Attributes:
        "samplingFrequency" - frequency with which signal was sampled (integer - [Hz])
        "goalFrequency" - goal frequency with which signal should be sampled (integer - [Hz])

    [GET PHASE PART]
    Description:  calculate phase part of given signal by subtract baseline values
    Function name: "get_phase_part"
    Attributes:
        "deg" is degree of the polynomial that will estimate the data baseline - recommended is 10
        "maxIt" is maximum number of iterations to perform for baseline function - recommended is 100

    [Z NORMALIZATION]
    Description:  process of normalizing signal with algorithm Z
    Function name: "z_normalize"
    Attributes: None

    [NOISE FILTERING]
    Description: Smooths out the signal by averaging the samples.
    Function name: "smooth"
    Attributes:
        "numberOfIterations" - This is the number of iterations for the sample smoothing algorithm.
            The higher the number of iterations, the smoother the signal.

6. FEATURE EXTRACTION STRUCTURE
    To call function for feature extraction from the signal in configuration file one has to fill 3 elements:
    "functionName": "...",
    "order": ...,
    "outputLabel": "..."

    *   functionName - name of the function one wants to use (string)
    **  order - natural number bigger or equal 1 which indicates the order of processing flow (int)
    *** (optional) outputLabel - optional elements where user can define label for extracted feature. (string)
        If this element is omitted, program will generate default output label for a feature.
        Otherwise, the label will be exactly the same as specified in the configuration file.

7. AVAILABLE FUNCTIONS FOR FEATURE EXTRACTION
    [MEAN]
    Description: Function to extract mean value from the signal
    Function name: "mean"
    Default output label: "Mean"

    [MEDIAN]
    Description: Function to extract median value from the signal
    Function name: "median"
    Default output label: "Median"

    [STANDARD DEVIATION]
    Description: Function to extract standard deviation value from the signal
    Function name: "standard_deviation"
    Default output label: "Standard deviation"

    [MINIMUM]
    Description: Function to extract minimum value from the signal
    Function name: "minimum"
    Default output label: "Minimum"

    [MAXIMUM]
    Description: Function to extract maximum value from the signal
    Function name: "maximum"
    Default output label: "Maximum"

    [VARIANCE]
    Description: Function to extract the variance value from the signal
    Function name: "variance"
    Default output label: "Variance"

    [KURTOSIS]
    Description: Function to extract kurtosis value from the signal
    Function name: "kurtosis"
    Default output label: "Kurtosis"

    [SKEWNESS]
    Description: Function to extract skewness value from the signal
    Function name: "skewness"
    Default output label: "Skewness"
